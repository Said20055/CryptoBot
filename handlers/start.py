"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ /start, /help, /id,
–∞ —Ç–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏.
"""

import os
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    BufferedInputFile,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_CHAT_ID
from utils.logging_config import logger
from utils.texts import WELCOME_PHOTO_URL, WELCOME_TEXT, MAIN_KEYBOARD, format_user_display_name
from utils.database import save_or_update_user, find_all_users
import pandas as pd
from io import BytesIO
from openpyxl.utils import get_column_letter
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_message = State()

async def start_handler(event: Message | CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    Args:
        event: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback query
    """
    photo_url = WELCOME_PHOTO_URL
    text = WELCOME_TEXT
    keyboard = MAIN_KEYBOARD
    if isinstance(event, Message):
        username = event.from_user.username or "–ù–µ—Ç username"
        full_name = event.from_user.full_name
        user_id = event.from_user.id
        is_new_user = await save_or_update_user(user_id, username, full_name)
        logger.info(f"User {user_id} ({username}) {'saved as new' if is_new_user else 'updated'} in DB")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º /start
        for admin_id in ADMIN_CHAT_ID:
            try:
                await event.bot.send_message(
                    chat_id=admin_id,
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª /start:\nUsername: {format_user_display_name(username)}\n–ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\nID: {user_id}\n–ù–æ–≤—ã–π: {is_new_user}",
                    parse_mode=None
                )
                logger.info(f"Notification sent to admin {admin_id} about user {username}")
            except (ConnectionError, TimeoutError) as e:
                logger.error(f"Failed to notify admin {admin_id} about user {user_id}: {e}")
        await event.answer_photo(
            photo=photo_url, caption=text, reply_markup=keyboard, parse_mode="Markdown"
        )
    else:  # isinstance(event, CallbackQuery)
        logger.info(f"User {event.from_user.id} returned to main menu via callback")
        await event.message.answer_photo(
            photo=photo_url, caption=text, reply_markup=keyboard, parse_mode="Markdown"
        )
        await event.message.delete()

async def sell_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.
    
    Args:
        callback_query: Callback query –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    """
    await callback_query.message.answer(
        "–ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤–∞—à–∏ –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∂–¥–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤.")
    await callback_query.answer()

async def buy_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.
    
    Args:
        callback_query: Callback query –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    """
    await callback_query.message.answer(
        "–ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤–∞—à–∏ –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∂–¥–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —à–∞–≥–æ–≤.")
    await callback_query.answer()

async def operator_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.
    
    Args:
        callback_query: Callback query –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    from utils.states import TransactionStates
    from config import ADMIN_CHAT_ID
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    action = data.get('action')
    crypto = data.get('crypto')
    amount_crypto = data.get('amount_crypto')
    amount_rub = data.get('amount_rub')
    total_amount = data.get('total_amount', amount_rub)
    
    if action and crypto and amount_crypto and amount_rub:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        username = callback_query.from_user.username or callback_query.from_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_id = callback_query.from_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if action == 'sell':
            request_text = "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É–±–ª–µ–π\n–ü—Ä–∏–º–µ—Ä: +79999999999, –°–±–µ—Ä–±–∞–Ω–∫"
        else:
            request_text = f"–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ {crypto} –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n–ü—Ä–∏–º–µ—Ä: bc1qtmgxuhpqt5l36pwcrnh9ujkm0afgrqvgumnk0n"
        
        text = (
            f"üë®‚Äçüíº –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üí≥ {action.title()} {crypto}\n"
            f"üíé –°—É–º–º–∞: {amount_crypto:,.8f} {crypto}\n"
            f"üí∞ –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö: {total_amount:,.2f} ‚ÇΩ\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"{request_text}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        from utils.texts import format_user_display_name
        admin_text = (
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:* {format_user_display_name(username)} (ID: {user_id})\n"
            f"üí≥ –û–ø–µ—Ä–∞—Ü–∏—è: {action.title()} {crypto}\n"
            f"üíé –°—É–º–º–∞: {amount_crypto:,.8f} {crypto}\n"
            f"üí∞ –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö: {total_amount:,.2f} ‚ÇΩ\n\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏."
        )
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        admin_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_reply_{user_id}")]
            ]
        )
        
        for admin_id in ADMIN_CHAT_ID:
            try:
                await callback_query.bot.send_message(
                    chat_id=admin_id,
                    text=admin_text,
                    reply_markup=admin_keyboard,
                    parse_mode="Markdown"
                )
                logger.info(f"Operator request sent to admin {admin_id}")
            except (ConnectionError, TimeoutError) as e:
                logger.error(f"Failed to send operator request to admin {admin_id}: {e}")
        
        await callback_query.message.reply(text, parse_mode="Markdown")
        await state.set_state(TransactionStates.waiting_for_phone)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await callback_query.message.answer(
            "üë®‚Äçüíº –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: @jenya2hh\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ —Å –æ–±–º–µ–Ω–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
    
    await callback_query.answer()

async def reviews_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤–æ–≤.
    
    Args:
        callback_query: Callback query –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    """
    await callback_query.message.answer(
        "–û—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ: —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–¥–±–æ—Ä–∫—É.")
    await callback_query.answer()

async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /help
    """
    text = (
        "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "–Ø ‚Äî –±–æ—Ç –û–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- /start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "- /id ‚Äî –ü–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã!"
    )
    await message.answer(text, parse_mode="Markdown")

async def id_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /id
    """
    user_id = message.from_user.id
    await message.answer(f"–í–∞—à Telegram ID: {user_id}")
    logger.info(f"User {user_id} requested their Telegram ID")

async def image_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    """
    if message.photo:
        photo_id = message.photo[-1].file_id
        username = message.from_user.username or message.from_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_id = message.from_user.id
        
        logger.info(f"Received photo with ID: {photo_id} from user {user_id}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        admin_text = (
            f"üì∑ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {format_user_display_name(username)} (ID: {user_id})\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å—Ç–µ –µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        admin_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_reply_{user_id}")]
            ]
        )
        
        for admin_id in ADMIN_CHAT_ID:
            try:
                await message.bot.send_photo(
                    chat_id=admin_id,
                    photo=photo_id,
                    caption=admin_text,
                    reply_markup=admin_keyboard,
                    parse_mode="Markdown"
                )
                logger.info(f"Photo sent to admin {admin_id}")
            except (ConnectionError, TimeoutError) as e:
                logger.error(f"Failed to send photo to admin {admin_id}: {e}")

async def users_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /users
    """
    user_id = message.from_user.id
    if user_id not in ADMIN_CHAT_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logger.info(f"User {user_id} attempted to use /users but is not an admin")
        return

    try:
        users = await find_all_users()
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logger.info("No users found in database for /users command")
            return

        # –°–æ–∑–¥–∞—ë–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–∫–ª—é—á–∞—è invite_link_issued –∏ subscription_duration
        columns = ["user_id", "username", "full_name", "email", "is_subscribed", "subscription_end", "created_at"]
        df = pd.DataFrame(users, columns=["user_id", "username", "full_name", "email", "is_subscribed", "subscription_end", "created_at", "invite_link_issued", "subscription_duration"])
        df = df[columns]  # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        df["is_subscribed"] = df["is_subscribed"].apply(lambda x: "–î–∞" if x else "–ù–µ—Ç")
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è NaT –∏ None
        df["subscription_end"] = pd.to_datetime(df["subscription_end"], errors='coerce').dt.strftime("%d.%m.%Y %H:%M:%S").fillna("–ù–µ—Ç")
        df["created_at"] = pd.to_datetime(df["created_at"], errors='coerce').dt.strftime("%d.%m.%Y %H:%M:%S").fillna("–ù–µ—Ç")

        # –°–æ–∑–¥–∞—ë–º Excel-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name="Users")
            worksheet = writer.sheets["Users"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏
            header_fill = PatternFill(start_color="4682B4", end_color="4682B4", fill_type="solid")  # –°–∏–Ω–∏–π (SteelBlue)
            white_fill = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")  # –ë–µ–ª—ã–π
            gray_fill = PatternFill(start_color="EAEAE9", end_color="EAEAE9", fill_type="solid")  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π (#EAEAE9)
            header_font = Font(color="FFFFFF", bold=True)  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç, –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
            header_alignment = Alignment(horizontal="center", vertical="center")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            thin_border = Border(left=Side(style="thin"), right=Side(style="thin"), top=Side(style="thin"), bottom=Side(style="thin"))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
            for col_num, column in enumerate(df.columns, 1):
                cell = worksheet.cell(row=1, column=col_num)
                cell.fill = header_fill
                cell.font = header_font
                cell.alignment = header_alignment
                cell.border = thin_border
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞
                max_length = max(
                    df[column].astype(str).map(len).max(),  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    len(str(column))  # –î–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                )
                adjusted_width = max_length + 2
                worksheet.column_dimensions[get_column_letter(col_num)].width = adjusted_width
            
            # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü
            for row_num in range(2, len(df) + 2):
                fill = gray_fill if (row_num % 2 == 0) else white_fill
                for col_num in range(1, len(df.columns) + 1):
                    cell = worksheet.cell(row=row_num, column=col_num)
                    cell.fill = fill
                    cell.border = thin_border
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            worksheet.auto_filter.ref = f"A1:{get_column_letter(len(df.columns))}{len(df) + 1}"
        
        output.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
        file = BufferedInputFile(output.getvalue(), filename="users.xlsx")
        await message.answer_document(file, caption="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        logger.info(f"User {user_id} received users list as Excel file")
        
    except (IOError, ValueError, KeyError) as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to generate users list for user {user_id}: {e}")

async def log_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /log
    """
    user_id = message.from_user.id
    if user_id not in ADMIN_CHAT_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logger.info(f"User {user_id} attempted to use /log but is not an admin")
        return

    log_file_path = "logging.log"
    try:
        if not os.path.exists(log_file_path):
            await message.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logger.info("Log file not found for /log command")
            return

        with open(log_file_path, "rb") as f:
            file = BufferedInputFile(f.read(), filename="bot.log")
            await message.answer_document(file, caption="–§–∞–π–ª –ª–æ–≥–æ–≤ –±–æ—Ç–∞")
            logger.info(f"User {user_id} received log file")
    except (IOError, FileNotFoundError) as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to send log file to user {user_id}: {e}")

async def send_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /send
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    user_id = message.from_user.id
    if user_id not in ADMIN_CHAT_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logger.info(f"User {user_id} attempted to use /send but is not an admin")
        return

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
            ]
        )
    )
    await state.set_state(BroadcastStates.waiting_for_message)

async def cancel_broadcast_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏.
    
    Args:
        callback_query: Callback query –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    user_id = callback_query.from_user.id
    if user_id not in ADMIN_CHAT_ID:
        await callback_query.message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logger.info(f"User {user_id} attempted to cancel broadcast but is not an admin")
        await callback_query.message.delete()
        return

    await state.clear()
    await callback_query.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logger.info(f"User {user_id} cancelled broadcast")
    await callback_query.message.delete()

async def broadcast_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    user_id = message.from_user.id
    if user_id not in ADMIN_CHAT_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logger.info(f"User {user_id} attempted to broadcast message but is not an admin")
        await state.clear()
        return

    broadcast_text = message.text
    try:
        users = await find_all_users()
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logger.info("No users found for broadcast")
            await state.clear()
            return

        successful = 0
        failed = 0
        failed_users = []

        for user in users:
            target_user_id = user[0]
            username = user[1] or user[2] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # user[1] = username, user[2] = full_name
            try:
                await message.bot.send_message(
                    chat_id=target_user_id,
                    text=broadcast_text,
                    parse_mode="Markdown"
                )
                successful += 1
                logger.info(f"Broadcast message sent to user {target_user_id} ({format_user_display_name(username)})")
            except (ConnectionError, TimeoutError) as e:
                failed += 1
                failed_users.append(f"{format_user_display_name(username)} (ID: {target_user_id})")
                logger.error(f"Failed to send broadcast to user {target_user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É, –≤—ã–∑–≤–∞–≤—à–µ–º—É –∫–æ–º–∞–Ω–¥—É
        report = (
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
            f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed}\n"
        )
        if failed_users:
            report += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n" + "\n".join(failed_users)
        await message.answer(report)
        logger.info(f"Broadcast report sent to admin {user_id}: {successful} successful, {failed} failed")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—Ç—á—ë—Ç–µ
        for admin_id in ADMIN_CHAT_ID:
            if admin_id != user_id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É
                try:
                    await message.bot.send_message(
                        chat_id=admin_id,
                        text=report,
                        parse_mode=None
                    )
                    logger.info(f"Broadcast report sent to admin {admin_id}")
                except (ConnectionError, TimeoutError) as e:
                    logger.error(f"Failed to send broadcast report to admin {admin_id}: {e}")

        await state.clear()
    except (ConnectionError, TimeoutError, ValueError) as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to perform broadcast for user {user_id}: {e}")
        await state.clear()