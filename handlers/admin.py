"""
–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:
—Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã.
"""

import os
from io import BytesIO
import aiosqlite
import pandas as pd
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import AiogramError
from openpyxl.utils import get_column_letter
from openpyxl.styles import PatternFill, Font, Alignment, Border, Side

from config import ADMIN_CHAT_ID
from utils.logging_config import logger
from utils.database.db_connector import DB_NAME
from utils.database.db_queries import add_promo_code, find_all_users, refund_promo_if_needed, update_order_status, use_activated_promo
from utils.states import PromoStates

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_message = State()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –º–æ–¥—É–ª—è)
class AdminReplyStates(StatesGroup):
    waiting_for_reply_message = State()

async def send_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send"""
    user_id = message.from_user.id
    if user_id not in ADMIN_CHAT_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logger.info(f"User {user_id} attempted to use /send but is not an admin")
        return

    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
    )
    await state.set_state(BroadcastStates.waiting_for_message)

async def cancel_broadcast_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = callback_query.from_user.id
    if user_id not in ADMIN_CHAT_ID:
        await callback_query.message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logger.info(f"User {user_id} attempted to cancel broadcast but is not an admin")
        await callback_query.message.delete()
        return

    await state.clear()
    await callback_query.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logger.info(f"User {user_id} cancelled broadcast")
    await callback_query.message.delete()

async def admin_reply_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        callback_query: Callback query –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    user_id = callback_query.from_user.id
    if user_id not in ADMIN_CHAT_ID:
        await callback_query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º target_user_id –∏–∑ callback_data
    try:
        target_user_id = int(callback_query.data.split('_')[2])
    except (ValueError, IndexError):
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º target_user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(target_user_id=target_user_id)
    await state.set_state(AdminReplyStates.waiting_for_reply_message)
    
    await callback_query.message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:")
    await callback_query.answer()

async def admin_reply_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    data = await state.get_data()
    target_user_id = data.get('target_user_id')

    if not target_user_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –°–µ—Å—Å–∏—è –º–æ–≥–ª–∞ –∏—Å—Ç–µ—á—å.")
        await state.clear()
        return
        
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from utils.texts import get_reply_to_operator_keyboard

    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.send_message(
            chat_id=target_user_id,
            text=f"üë®‚Äçüíº *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:*\n\n{message.text}",
            reply_markup=get_reply_to_operator_keyboard(),
            parse_mode="Markdown"
        )
        # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É, —á—Ç–æ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        logger.info(f"Admin {message.from_user.id} sent a reply to user {target_user_id}")
        
    except AiogramError as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}. –û—à–∏–±–∫–∞: {e}")
        logger.error(f"Failed to send admin reply to user {target_user_id}: {e}")
    
    await state.clear()
    
async def broadcast_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    if user_id not in ADMIN_CHAT_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        logger.info(f"User {user_id} attempted to broadcast message but is not an admin")
        await state.clear()
        return

    broadcast_text = message.text
    try:
        users = await find_all_users()
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logger.info("No users found for broadcast")
            await state.clear()
            return

        successful = 0
        failed = 0
        failed_users = []

        for user in users:
            target_user_id = user[0]
            username = user[1] or user[2] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # user[1] = username, user[2] = full_name
            try:
                await message.bot.send_message(
                    chat_id=target_user_id,
                    text=broadcast_text,
                    parse_mode="Markdown"
                )
                successful += 1
                from utils.texts import format_user_display_name
                logger.info(f"Broadcast message sent to user {target_user_id} ({format_user_display_name(username)})")
            except (ConnectionError, TimeoutError) as e:
                failed += 1
                from utils.texts import format_user_display_name
                failed_users.append(f"{format_user_display_name(username)} (ID: {target_user_id})")
                logger.error(f"Failed to send broadcast to user {target_user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É, –≤—ã–∑–≤–∞–≤—à–µ–º—É –∫–æ–º–∞–Ω–¥—É
        report = (
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful}\n"
            f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed}\n"
        )
        if failed_users:
            report += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n" + "\n".join(failed_users)
        await message.answer(report)
        logger.info(f"Broadcast report sent to admin {user_id}: {successful} successful, {failed} failed")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—Ç—á—ë—Ç–µ
        for admin_id in ADMIN_CHAT_ID:
            if admin_id != user_id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É
                try:
                    await message.bot.send_message(
                        chat_id=admin_id,
                        text=report,
                        parse_mode=None
                    )
                    logger.info(f"Broadcast report sent to admin {admin_id}")
                except (ConnectionError, TimeoutError) as e:
                    logger.error(f"Failed to send broadcast report to admin {admin_id}: {e}")

        await state.clear()
    except (ConnectionError, TimeoutError, ValueError) as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to perform broadcast for user {user_id}: {e}")
        await state.clear()

async def add_promo_handler(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π."""
    if message.from_user.id not in ADMIN_CHAT_ID: return
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ü–†–û–ú–û–ö–û–î,–ö–û–õ–ò–ß–ï–°–¢–í–û</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>FREE2025,50</code> (—ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∫–æ–¥ –Ω–∞ 50 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)",
        parse_mode="HTML"
    )
    await state.set_state(PromoStates.waiting_for_promo_code)

async def process_new_promo_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥, –ø–∞—Ä—Å–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)."""
    if message.from_user.id not in ADMIN_CHAT_ID: return
    
    parts = [p.strip() for p in message.text.split(',')]
    if len(parts) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: <b>–ü–†–û–ú–û–ö–û–î,–ö–û–õ–ò–ß–ï–°–¢–í–û</b>", parse_mode="HTML")
        return

    code = parts[0].upper()
    try:
        uses = int(parts[1])
        if uses <= 0 or not code: raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    # --- –ù–û–í–´–ô –ü–ê–¢–¢–ï–†–ù –†–ê–ë–û–¢–´ –° –ë–î ---
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                success = await add_promo_code(cursor, code, uses)
                await db.commit()
    except Exception as e:
        logger.error(f"DB error while creating promo code '{code}': {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–ê–¢–¢–ï–†–ù–ê ---

    if success:
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> –Ω–∞ <b>{uses}</b> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", parse_mode="HTML")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code>. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode="HTML")
    
    await state.clear()
    
async def confirm_order_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)."""
    parts = callback_query.data.split('_')
    
    if len(parts) != 4:
        logger.error(f"Invalid callback data format for confirm_order: {callback_query.data}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", show_alert=True)
        return

    try:
        _, _, order_id_str, user_id_str = parts
        order_id = int(order_id_str)
        user_id = int(user_id_str)
    except ValueError:
        logger.error(f"Could not parse ID from callback: {callback_query.data}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return
    
    # --- –ù–û–í–´–ô –ü–ê–¢–¢–ï–†–ù –†–ê–ë–û–¢–´ –° –ë–î ---
    promo_was_used = False
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ —Ñ—É–Ω–∫—Ü–∏—é
                await update_order_status(cursor, order_id, "completed")
                promo_was_used = await use_activated_promo(cursor, user_id, order_id)
                await db.commit()
    except Exception as e:
        logger.error(f"DB error in confirm_order_handler for order #{order_id}: {e}", exc_info=True)
        await callback_query.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞!", show_alert=True)
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–ê–¢–¢–ï–†–ù–ê ---
        
    order_number = order_id + 9999
    
    try:
        await callback_query.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ `#{order_number}` –±—ã–ª–∞ *—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞* –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode="Markdown"
        )
        await callback_query.message.edit_text(
            f"{callback_query.message.text}\n\n*–°—Ç–∞—Ç—É—Å: ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û*",
            parse_mode="Markdown"
        )
        await callback_query.answer(f"–ó–∞—è–≤–∫–∞ #{order_number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", show_alert=True)
        
        logger.info(f"Admin {callback_query.from_user.id} confirmed order #{order_number} (ID: {order_id}).")
        if promo_was_used:
            logger.info(f"Promo code for user {user_id} was used for order #{order_number}.")
            
    except AiogramError as e:
        await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—à–∏–±–∫–∞: {e}", show_alert=True)
        logger.error(f"Failed to notify user {user_id} about order confirmation: {e}")


async def reject_order_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º –∏ '–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç' –ø—Ä–æ–º–æ–∫–æ–¥ (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)."""
    parts = callback_query.data.split('_')
    
    if len(parts) != 4:
        logger.error(f"Invalid callback data format for reject_order: {callback_query.data}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", show_alert=True)
        return

    try:
        _, _, order_id_str, user_id_str = parts
        order_id = int(order_id_str)
        user_id = int(user_id_str)
    except ValueError:
        logger.error(f"Could not parse ID from callback: {callback_query.data}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏!", show_alert=True)
        return

    # --- –ù–û–í–´–ô –ü–ê–¢–¢–ï–†–ù –†–ê–ë–û–¢–´ –° –ë–î ---
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ —Ñ—É–Ω–∫—Ü–∏—é
                await update_order_status(cursor, order_id, "rejected")
                await refund_promo_if_needed(cursor, user_id, order_id)
                await db.commit()
    except Exception as e:
        logger.error(f"DB error in reject_order_handler for order #{order_id}: {e}", exc_info=True)
        await callback_query.answer("–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞!", show_alert=True)
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–ê–¢–¢–ï–†–ù–ê ---
    
    order_number = order_id + 9999

    try:
        await callback_query.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ `#{order_number}` –±—ã–ª–∞ *–æ—Ç–º–µ–Ω–µ–Ω–∞* –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –æ–Ω —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            parse_mode="Markdown"
        )
        await callback_query.message.edit_text(
            f"{callback_query.message.text}\n\n*–°—Ç–∞—Ç—É—Å: ‚ùå –û–¢–ú–ï–ù–ï–ù–û*",
            parse_mode="Markdown"
        )
        await callback_query.answer(f"–ó–∞—è–≤–∫–∞ #{order_number} –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–æ–º–æ–∫–æ–¥ (–µ—Å–ª–∏ –±—ã–ª) –≤–æ–∑–≤—Ä–∞—â–µ–Ω.", show_alert=True)
        logger.info(f"Admin {callback_query.from_user.id} rejected order #{order_number} (ID: {order_id}).")
    except AiogramError as e:
        await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—à–∏–±–∫–∞: {e}", show_alert=True)
        logger.error(f"Failed to notify user {user_id} about order rejection: {e}")