"""
–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ —Å—Ç–∞—Ä—Ç–∞
"""
import aiosqlite
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import AiogramError
from config import ADMIN_CHAT_ID
from utils.logging_config import logger
from utils.database.db_connector import DB_NAME
from utils.database.db_queries import activate_promo_for_user, get_user_profile, save_or_update_user
from utils.texts import WELCOME_PHOTO_URL, WELCOME_TEXT, HELP_TEXT, format_user_display_name, get_main_keyboard, get_back_to_main_menu_keyboard
from utils.states import UserPromoStates
from typing import Union

async def start_handler(event: Union[Message, CallbackQuery]):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø).
    """
    user_id = event.from_user.id
    username = event.from_user.username or "–ù–µ—Ç username"
    full_name = event.from_user.full_name

    # --- –ù–û–í–´–ô –ü–ê–¢–¢–ï–†–ù –†–ê–ë–û–¢–´ –° –ë–î ---
    is_new_user = False # –ó–∞–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                is_new_user = await save_or_update_user(cursor, user_id, username, full_name)
                await db.commit()
    except Exception as e:
        logger.error(f"DB error in start_handler for user {user_id}: {e}", exc_info=True)
        # –ï—Å–ª–∏ –ë–î —É–ø–∞–ª–∞, –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if isinstance(event, Message):
            await event.answer(error_message)
        else:
            await event.message.answer(error_message)
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–ê–¢–¢–ï–†–ù–ê ---

    logger.info(f"User {user_id} ({username}) {'saved as new' if is_new_user else 'updated'} in DB")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    if is_new_user:
        for admin_id in ADMIN_CHAT_ID:
            try:
                await event.bot.send_message(
                        chat_id=admin_id,
                        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª /start:\nUsername: {format_user_display_name(username)}\n–ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\nID: {user_id}\n–ù–æ–≤—ã–π: {is_new_user}",
                        parse_mode=None
                )
                logger.info(f"Notification sent to admin {admin_id} about user {username}")
            except (ConnectionError, TimeoutError) as e:
                    logger.error(f"Failed to notify admin {admin_id} about user {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if isinstance(event, Message):
        await event.answer_photo(
            photo= WELCOME_PHOTO_URL, 
            caption= WELCOME_TEXT, 
            reply_markup= get_main_keyboard(), 
            parse_mode="Markdown"
        )
    else: # CallbackQuery
        await event.message.answer_photo(
            photo= WELCOME_PHOTO_URL, 
            caption= WELCOME_TEXT, 
            reply_markup= get_main_keyboard(), 
            parse_mode="Markdown"
        )
        try:
            await event.message.delete()
        except AiogramError as e:
            logger.warning(f"Could not delete message: {e}")

async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(HELP_TEXT, parse_mode="Markdown")

async def id_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id"""
    user_id = message.from_user.id
    await message.answer(f"–í–∞—à Telegram ID: {user_id}")
    logger.info(f"User {user_id} requested their Telegram ID")

async def handle_photo(message: Message):
    # photo ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π)
    file_id = message.photo[-1].file_id
    await message.answer(f"file_id —Ñ–æ—Ç–æ: {file_id}")

async def image_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if message.photo:
        photo_id = message.photo[-1].file_id
        username = message.from_user.username or message.from_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_id = message.from_user.id
        await handle_photo(message)
        logger.info(f"Received photo with ID: {photo_id} from user {user_id}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        from utils.texts import format_user_display_name
        admin_text = (
            f"üì∑ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {format_user_display_name(username)} (ID: {user_id})\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å—Ç–µ –µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        admin_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_reply_{user_id}")]
            ]
        )
        
        for admin_id in ADMIN_CHAT_ID:
            try:
                await message.bot.send_photo(
                    chat_id=admin_id,
                    photo=photo_id,
                    caption=admin_text,
                    reply_markup=admin_keyboard,
                    parse_mode="Markdown"
                )
                logger.info(f"Photo sent to admin {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send photo to admin {admin_id}: {e}")
async def profile_handler(event: Union[Message, CallbackQuery]):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /profile –∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å" (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø).
    """
    user_id = event.from_user.id
    profile_data = None
    
    # --- –ù–û–í–´–ô –ü–ê–¢–¢–ï–†–ù –†–ê–ë–û–¢–´ –° –ë–î ---
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                profile_data = await get_user_profile(cursor, user_id)
    except Exception as e:
        logger.error(f"DB error in profile_handler for user {user_id}: {e}", exc_info=True)
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if isinstance(event, Message):
            await event.answer(text)
        else:
            await event.message.answer(text)
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–ê–¢–¢–ï–†–ù–ê ---

    keyboard = get_back_to_main_menu_keyboard()
    
    if profile_data:
        username = profile_data['username'] or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –æ–±–º–µ–Ω—ã, –∫–∞–∫ –∏ —Ö–æ—Ç–µ–ª–∏
        text = (
            f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>ID:</b> <code>{user_id}</code>\n"
            f"<b>–ù–∏–∫–Ω–µ–π–º:</b> @{username}\n\n"
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤:</b>\n"
            f"  - <b>–í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {profile_data['total_orders']}\n"
            f"  - <b>–û–±—â–∏–π –æ–±—ä–µ–º:</b> {profile_data['total_volume_rub']:.2f} RUB"
        )
    else:
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤."

    if isinstance(event, Message):
        await event.answer(text, reply_markup=keyboard, parse_mode="HTML")
    elif isinstance(event, CallbackQuery):
        await event.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        try:
            await event.message.delete()
        except Exception as e:
            logger.warning(f"Could not delete message: {e}")
            
async def process_user_promo_code(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)."""
    code = message.text.strip()
    
    # --- –ù–û–í–´–ô –ü–ê–¢–¢–ï–†–ù –†–ê–ë–û–¢–´ –° –ë–î ---
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
                result = await activate_promo_for_user(cursor, message.from_user.id, code)
                await db.commit() # –§–∏–∫—Å–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    except Exception as e:
        logger.error(f"DB error during promo activation for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–ê–¢–¢–ï–†–ù–ê ---

    if result == "success":
        await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à —Å–ª–µ–¥—É—é—â–∏–π –æ–±–º–µ–Ω –±—É–¥–µ—Ç –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏.")
    elif result == "invalid_or_expired":
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –∏–ª–∏ —É –Ω–µ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
    elif result == "already_active":
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ.")
    elif result == "already_redeemed":
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.")
    else: # 'error'
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

async def promo_command_handler(event: Union[Message, CallbackQuery], state: FSMContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /promo –∏ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥".
    """
    # –¢–µ–∫—Å—Ç –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤
    text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:"
    await state.set_state(UserPromoStates.waiting_for_code)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ö–µ–Ω–¥–ª–µ—Ä, –∏ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
    if isinstance(event, Message):
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /promo, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await event.answer(text)
    elif isinstance(event, CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫
        await event.message.answer(text)
        await event.answer() # –≠—Ç–æ —É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
