"""
–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ —Å—Ç–∞—Ä—Ç–∞
"""

from aiogram.types import Message, CallbackQuery
from config import ADMIN_CHAT_ID
from utils.logging_config import logger
from utils.database import get_user_profile, save_or_update_user
from utils.texts import WELCOME_TEXT, HELP_TEXT, get_main_keyboard, get_back_to_main_keyboard
from typing import Union

async def start_handler(event: Message | CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    photo_url = "https://postimg.cc/LhjTfzJd"
    keyboard = get_main_keyboard()
    
    if isinstance(event, Message):
        username = event.from_user.username or "–ù–µ—Ç username"
        full_name = event.from_user.full_name
        user_id = event.from_user.id
        is_new_user = await save_or_update_user(user_id, username, full_name)
        logger.info(f"User {user_id} ({username}) {'saved as new' if is_new_user else 'updated'} in DB")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º /start
        for admin_id in ADMIN_CHAT_ID:
            try:
                await event.bot.send_message(
                    chat_id=admin_id,
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª /start:\nUsername: @{username}\n–ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\nID: {user_id}\n–ù–æ–≤—ã–π: {is_new_user}",
                    parse_mode=None
                )
                logger.info(f"Notification sent to admin {admin_id} about user {username}")
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id} about user {user_id}: {e}")
        
        await event.answer_photo(
            photo=photo_url, caption=WELCOME_TEXT, reply_markup=keyboard, parse_mode="Markdown"
        )
    else:  # isinstance(event, CallbackQuery)
        logger.info(f"User {event.from_user.id} returned to main menu via callback")
        await event.message.answer_photo(
            photo=photo_url, caption=WELCOME_TEXT, reply_markup=keyboard, parse_mode="Markdown"
        )
        try:
            await event.message.delete()
        except Exception as e:
            logger.warning(f"Could not delete message: {e}")

async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(HELP_TEXT, parse_mode="Markdown")

async def id_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id"""
    user_id = message.from_user.id
    await message.answer(f"–í–∞—à Telegram ID: {user_id}")
    logger.info(f"User {user_id} requested their Telegram ID")

async def image_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if message.photo:
        photo_id = message.photo[-1].file_id
        username = message.from_user.username or message.from_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_id = message.from_user.id
        
        logger.info(f"Received photo with ID: {photo_id} from user {user_id}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        from utils.texts import format_user_display_name
        admin_text = (
            f"üì∑ *–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {format_user_display_name(username)} (ID: {user_id})\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å—Ç–µ –µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        admin_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_reply_{user_id}")]
            ]
        )
        
        for admin_id in ADMIN_CHAT_ID:
            try:
                await message.bot.send_photo(
                    chat_id=admin_id,
                    photo=photo_id,
                    caption=admin_text,
                    reply_markup=admin_keyboard,
                    parse_mode="Markdown"
                )
                logger.info(f"Photo sent to admin {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send photo to admin {admin_id}: {e}")
async def profile_handler(event: Union[Message, CallbackQuery]):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /profile –∏ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    keyboard = get_back_to_main_keyboard()
    # –ü–æ–ª—É—á–∞–µ–º user_id. –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è Message, –∏ –¥–ª—è CallbackQuery.
    user_id = event.from_user.id
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ë–î
    profile_data = await get_user_profile(user_id)
    
    if profile_data:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        username = profile_data['username'] or "–Ω–µ —É–∫–∞–∑–∞–Ω"

        text = (
            f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>ID:</b> <code>{profile_data['user_id']}</code>\n"
            f"<b>–ù–∏–∫–Ω–µ–π–º:</b> @{username}\n\n"
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"  - <b>–í—Å–µ–≥–æ –æ–±–º–µ–Ω–æ–≤:</b> {profile_data['total_orders']}\n"
            f"  - <b>–û–±—â–∏–π –æ–±—ä–µ–º:</b> {profile_data['total_volume_rub']:.2f} RUB"
        )
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –æ–±–º–µ–Ω–æ–≤."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ö–µ–Ω–¥–ª–µ—Ä (–∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π)
    if isinstance(event, Message):
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await event.answer(text, reply_markup=keyboard ,parse_mode="HTML")
    elif isinstance(event, CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
        await event.message.answer(text, reply_markup=keyboard ,parse_mode="HTML")
        # –ò —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        try:
            await event.message.delete()
        except Exception as e:
            logger.warning(f"Could not delete message: {e}")
