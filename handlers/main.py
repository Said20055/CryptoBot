# handlers/main.py (–í–ï–†–°–ò–Ø –° –î–ï–ö–û–†–ê–¢–û–†–ê–ú–ò)

"""
–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.
"""
import aiosqlite
from typing import Union
from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import AiogramError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Ä–æ—É—Ç–µ—Ä
from handlers.router import main_router as router

from config import ADMIN_CHAT_ID
from utils.logging_config import logger
from utils.database.db_connector import DB_NAME
from utils.database.db_queries import activate_promo_for_user, get_user_profile, save_or_update_user
from utils.texts import WELCOME_PHOTO_URL, WELCOME_TEXT, format_user_display_name, get_main_keyboard, get_back_to_main_menu_keyboard
from utils.states import UserPromoStates

# =============================================================================
# --- –ë–õ–û–ö: –°–¢–ê–†–¢ / –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
# =============================================================================

async def _show_main_menu(message: Message, is_new_user: bool):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    if is_new_user:
        for admin_id in ADMIN_CHAT_ID:
            try:
                await message.bot.send_message(
                    chat_id=admin_id,
                    text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or 'NoUsername'}\n"
                         f"–ò–º—è: {message.from_user.full_name}\nID: {message.from_user.id}",
                    parse_mode=None
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id} about new user: {e}")
    
    await message.answer_photo(
        photo=WELCOME_PHOTO_URL,
        caption=WELCOME_TEXT,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML" # –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ HTML
    )

@router.message(Command(commands=['start']))
async def start_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                is_new_user = await save_or_update_user(cursor, user_id, message.from_user.username, message.from_user.full_name)
                await db.commit()
    except Exception as e:
        logger.error(f"DB error in start_handler for user {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    await _show_main_menu(message, is_new_user)

@router.callback_query(F.data == 'back_to_main_menu')
async def back_to_main_menu_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await _show_main_menu(callback_query.message, is_new_user=False)
    try:
        await callback_query.message.delete()
    except AiogramError:
        pass
    await callback_query.answer()


# =============================================================================
# --- –ë–õ–û–ö: –ü–†–û–§–ò–õ–¨ ---
# =============================================================================

async def _get_profile_text(user_id: int) -> str:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è."""
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                profile_data = await get_user_profile(cursor, user_id)
    except Exception as e:
        logger.error(f"DB error in profile_handler for user {user_id}: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    if profile_data:
        username = profile_data['username'] or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        return (
            f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>ID:</b> <code>{user_id}</code>\n"
            f"<b>–ù–∏–∫–Ω–µ–π–º:</b> @{username}\n\n"
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤:</b>\n"
            f"  - <b>–í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {profile_data['total_orders']}\n"
            f"  - <b>–û–±—â–∏–π –æ–±—ä–µ–º:</b> {profile_data['total_volume_rub']:.2f} RUB"
        )
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤."

@router.message(Command(commands=['profile']))
async def profile_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile."""
    text = await _get_profile_text(message.from_user.id)
    await message.answer(text, reply_markup=get_back_to_main_menu_keyboard(), parse_mode="HTML")

@router.callback_query(F.data == 'profile')
async def profile_callback_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'."""
    text = await _get_profile_text(callback_query.from_user.id)
    await callback_query.message.answer(text, reply_markup=get_back_to_main_menu_keyboard(), parse_mode="HTML")
    try:
        await callback_query.message.delete()
    except AiogramError:
        pass
    await callback_query.answer()


# =============================================================================
# --- –ë–õ–û–ö: –ü–†–û–ú–û–ö–û–î–´ ---
# =============================================================================

@router.message(Command(commands=['promo']))
@router.callback_query(F.data == 'activate_promo')
async def promo_command_handler(event: Union[Message, CallbackQuery], state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /promo –∏ –∫–Ω–æ–ø–∫–∏ '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥'."""
    await state.set_state(UserPromoStates.waiting_for_code)
    text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:"
    
    if isinstance(event, Message):
        await event.answer(text)
    else: # CallbackQuery
        await event.message.answer(text)
        await event.answer()

@router.message(UserPromoStates.waiting_for_code)
async def process_user_promo_code(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    code = message.text.strip()
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                result = await activate_promo_for_user(cursor, message.from_user.id, code)
                await db.commit()
    except Exception as e:
        logger.error(f"DB error during promo activation for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    if result == "success":
        await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à —Å–ª–µ–¥—É—é—â–∏–π –æ–±–º–µ–Ω –±—É–¥–µ—Ç –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏.")
    elif result == "invalid_or_expired":
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –∏–ª–∏ —É –Ω–µ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
    elif result == "already_active":
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ.")
    elif result == "already_redeemed":
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.")
    else: # 'error'
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()