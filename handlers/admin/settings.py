# –§–∞–π–ª: handlers/admin/settings.py

import aiosqlite
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.filters import AdminFilter
from utils.database.db_connector import DB_NAME
from utils.database.db_queries import get_all_settings, update_setting
import logging
settings_router = Router()
settings_router.message.filter(AdminFilter())
settings_router.callback_query.filter(AdminFilter())

class SettingsEditStates(StatesGroup):
    waiting_for_new_value = State()

async def get_settings_menu():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.cursor() as cursor:
            settings = await get_all_settings(cursor)
    
    builder = InlineKeyboardBuilder()
    text = "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏</b>\n\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
    key_map = {
        'sbp_phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω –°–ë–ü',
        'sbp_bank': 'üè¶ –ë–∞–Ω–∫ –°–ë–ü'
    }
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª—å–∫–∏
    for key in settings:
        if key.startswith('wallet_'):
            key_map[key] = f"üí∞ –ö–æ—à–µ–ª–µ–∫ {key.replace('wallet_', '').upper()}"

    for key, name in key_map.items():
        value = settings.get(key, "–ù–µ –∑–∞–¥–∞–Ω–æ")
        text += f" - <b>{name}:</b> <code>{value}</code>\n"
        builder.button(text=f"–ò–∑–º–µ–Ω–∏—Ç—å {name}", callback_data=f"edit_setting:{key}")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin_panel")
    builder.adjust(1)
    return text, builder.as_markup()

@settings_router.callback_query(F.data == "admin_settings")
async def show_settings_menu(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏."""
    text, keyboard = await get_settings_menu()
    await call.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await call.answer()

@settings_router.callback_query(F.data.startswith("edit_setting:"))
async def edit_setting_prompt(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    key_to_edit = call.data.split(":")[1]
    await state.update_data(key_to_edit=key_to_edit)
    await state.set_state(SettingsEditStates.waiting_for_new_value)
    
    await call.message.edit_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <code>{key_to_edit}</code>:", parse_mode="HTML")
    await call.answer()

@settings_router.message(SettingsEditStates.waiting_for_new_value)
async def process_new_setting_value(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é."""
    data = await state.get_data()
    key = data.get('key_to_edit')
    new_value = message.text
    
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                await update_setting(cursor, key, new_value)
                await db.commit()
    except Exception as e:
        logging.error(f"Failed to update setting {key}: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ <code>{key}</code> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", parse_mode="HTML")
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    text, keyboard = await get_settings_menu()
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")