# –§–∞–π–ª: handlers/admin/broadcast.py
import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from utils.filters import AdminFilter
from utils.states import BroadcastStates
from utils.database.db_queries import find_all_users
from config import ADMIN_CHAT_ID

broadcast_router = Router()
broadcast_router.message.filter(AdminFilter()) # –ó–∞—â–∏—â–∞–µ–º FSM-—Ö–µ–Ω–¥–ª–µ—Ä

@broadcast_router.message(BroadcastStates.waiting_for_message)
async def broadcast_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É."""
    await state.clear()
    users = await find_all_users()
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    successful, failed = 0, 0
    for user in users:
        try:
            # message.copy_to() - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ª—é–±–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await message.copy_to(chat_id=user[0])
            successful += 1
        except Exception as e:
            failed += 1
            logging.error(f"Failed to send broadcast to user {user[0]}: {e}")

    report = (
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{successful}</b>\n"
        f"‚ùå –û—à–∏–±–æ–∫: <b>{failed}</b>"
    )
    await message.answer(report, parse_mode="HTML")