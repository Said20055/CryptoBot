# –§–∞–π–ª: handlers/admin/broadcast.py (–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –° –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï–ú)

import aiosqlite
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.filters import AdminFilter
from utils.keyboards import get_broadcast_confirmation_keyboard
from utils.states import BroadcastStates
from utils.database.db_connector import DB_NAME
from utils.database.db_queries import find_all_users
import logging

broadcast_router = Router()
broadcast_router.message.filter(AdminFilter())
broadcast_router.callback_query.filter(AdminFilter())



@broadcast_router.message(BroadcastStates.waiting_for_message)
async def broadcast_preview_handler(message: Message, state: FSMContext):
    """
    –®–ê–ì 1: –õ–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ ID –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞—Ç—å
    await state.update_data(
        message_to_broadcast_id=message.message_id,
        chat_id=message.chat.id
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    await message.copy_to(
        chat_id=message.chat.id,
        reply_markup=get_broadcast_confirmation_keyboard()
    )
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(BroadcastStates.waiting_for_confirmation)

@broadcast_router.callback_query(F.data == "confirm_broadcast", BroadcastStates.waiting_for_confirmation)
async def process_broadcast_confirmation(call: CallbackQuery, state: FSMContext):
    """
    –®–ê–ì 2: –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ç—Ç–µ—Ä–Ω –ë–î.
    """
    data = await state.get_data()
    message_id = data.get('message_to_broadcast_id')
    chat_id = data.get('chat_id')
    await state.clear()

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    await call.message.edit_reply_markup(None)
    
    users = None
    # --- –ù–û–í–´–ô –ü–ê–¢–¢–ï–†–ù –†–ê–ë–û–¢–´ –° –ë–î ---
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            async with db.cursor() as cursor:
                users = await find_all_users(cursor)
    except Exception as e:
        logger.error(f"DB error during broadcast: {e}", exc_info=True)
        await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–ê–¢–¢–ï–†–ù–ê ---

    if not users:
        await call.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    await call.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", show_alert=True)
    
    successful, failed = 0, 0
    for user in users:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.copy_message –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await call.bot.copy_message(chat_id=user[0], from_chat_id=chat_id, message_id=message_id)
            successful += 1
        except Exception as e:
            failed += 1
            logging.error(f"Failed to send broadcast to user {user[0]}: {e}")

    report = (
        f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{successful}</b>\n"
        f"‚ùå –û—à–∏–±–æ–∫: <b>{failed}</b>"
    )
    await call.message.answer(report, parse_mode="HTML")

@broadcast_router.callback_query(F.data == "cancel_broadcast", BroadcastStates.waiting_for_confirmation)
async def cancel_broadcast_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    await state.clear()
    await call.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.answer()